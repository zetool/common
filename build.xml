<!--
Tasks:
 - clean: remove all created files and directories
 - release: compile and store dist in versioned directory
 - build: compile source
   - init: initialize for compiling
 - dist: build and store in nightly/release
 - test: run tests
   - init.test: initialize for testing
   - build.test: build tests
-->
<project name="zetool commons" default="coverage" basedir=".">
  <property name="lib.name" value="zetool-commons"/>
  <description>
    Build file for zetools commons library.
  </description>

  <!-- set global properties for this build -->
  <property name="src.dir" location="src"/>
  <property name="test.src.dir" location="test"/>
  <property name="build.dir" location="build"/>
  <property name="test.build.dir" location="${build.dir}/test"/>
  <property name="dist.dir"  location="dist"/>
  <property name="javadoc.dir"  location="dist/javadoc"/>
  <property name="lib.dir"  location="lib"/>
  <property name="test.lib.dir"  location="${lib.dir}/test"/>
  <property name="reports.dir"  location="${build.dir}/reports"/>
  <property name="test.reports.dir"  location="${reports.dir}"/>
  <property name="classes.dir" location="${build.dir}/classes"/>
    
  <target name="init" description="initializes necessary directories">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${javadoc.dir}"/>
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${classes.dir}"/>
  </target>

  <target name="init.test" depends="init" description="generates test directories">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${test.build.dir}"/>
    <mkdir dir="${test.build.dir}/classes"/>
    <mkdir dir="${test.reports.dir}"/>
  </target>

  <target name="build" depends="init" description="compile the source" >
    <!-- Compile the java code from ${src.dir} into ${build.dir}/classes -->
    <javac srcdir="${src.dir}" destdir="${classes.dir}">
      <compilerarg value="-Xlint"/>    
    </javac>
  </target>

  <target name="build.test" depends="init.test,build" description="builds tests">
    <javac srcdir="${test.src.dir}" destdir="${test.build.dir}/classes">
      <classpath>
        <pathelement path="${classes.dir}"/>
        <pathelement location="${test.lib.dir}/junit-4.12.jar"/>
      </classpath>
    </javac>
  </target>
  
  <target name="build.javadoc" depends="init" description="builds JavaDoc">
  <javadoc destdir="${javadoc.dir}" sourcepath="${src.dir}"/>
    <!--<javadoc
             destdir="${javadoc.dir}"
             author="true"
             version="true"
             use="true"
             windowtitle="Test API">

      <fileset dir="${src.dir}" defaultexcludes="yes">
        <include name="*.java"/>
        <exclude name="com/dummy/test/doc-files/**"/>
      </fileset>

      <doctitle><![CDATA[<h1>Test</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; 2000 Dummy Corp. All Rights Reserved.</i>]]></bottom>
      <tag name="todo" scope="all" description="To do:"/>
      <group title="Group 1 Packages" packages="com.dummy.test.a*"/>
      <group title="Group 2 Packages" packages="com.dummy.test.b*:com.dummy.test.c*"/>
      <link offline="true" href="http://docs.oracle.com/javase/8/docs/api/" packagelistLoc="C:\tmp"/>
      <link href="http://docs.oracle.com/javase/8/docs/api/"/>
    </javadoc>-->
  </target>
  

  <target name="dist" depends="build" description="generating dist and test" >
    <jar jarfile="${dist.dir}/${lib.name}-rc.jar" basedir="${build.dir}/classes"/>
  </target>
    
  <target name="release" depends="build,test" description="build current release candidate" >
  </target>

 <!-- <target name="test" depends="clean.build,build.test,build.javadoc" description="performs unit tests">-->
  <target name="test" description="performs unit tests">
    <junit printsummary="yes" haltonfailure="yes" showoutput="true">
      <jvmarg value="-Dnet.sourceforge.cobertura.datafile=D:\Downloads\cobertura-2.1.1-bin\cobertura.ser"/>
      <classpath>
        <pathelement path="D:/Downloads/cobertura-2.1.1-bin/lib/logback-classic-1.0.13.jar"/>
        <pathelement path="D:/Downloads/cobertura-2.1.1-bin/lib/logback-core-1.0.13.jar"/>
        <pathelement path="D:/Downloads/cobertura-2.1.1-bin/lib/slf4j-api-1.7.5.jar"/>
        <pathelement path="D:/Downloads/cobertura-2.1.1-bin/cobertura-2.1.1.jar"/>
        <pathelement path="${java.class.path}"/>
        <pathelement path="${build.dir}/instrumented"/>
        <pathelement path="${build.dir}/classes"/>
        <pathelement path="${test.build.dir}/classes"/>
        <pathelement location="${test.lib.dir}/junit-4.12.jar"/>
        <pathelement location="${test.lib.dir}/hamcrest-core-1.3.jar"/>
      </classpath>

      <formatter type="xml"/>

      <batchtest fork="yes" todir="${test.reports.dir}">
        <fileset dir="${test.src.dir}">
          <include name="**/*Test*.java"/>
        </fileset>
      </batchtest>
    </junit>
    </target>

  <target name="clean" depends="clean.coverage,clean.build" description="clean up build and test directories" >
    <!-- Delete the ${build.dir} and ${dist} directory trees -->
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
  </target>

  <target name="clean.build" description="delete compiled files before running again" >
    <!-- Delete the ${build.dir} and ${dist} directory trees -->
    <delete dir="${build.dir}/classes"/>
    <delete dir="${test.build.dir}/classes"/>
  </target>

  <target name="clean.coverage" description="delete coverage data" >
		<!--  the coverage data file and any old instrumentation. -->
		<delete file="cobertura.ser"/>
		<delete dir="${instrumented.dir}" />
  </target>

  <property name="instrumented.dir" location="${build.dir}/instrumented"/>
<!-- # All reports go into this directory -->
<property name="reports.dir" location="reports"/>
<!-- # Unit test reports from JUnit are deposited into this directory -->
<property name="reports.xml.dir" location="${reports.dir}/junit-xml"/>
<property name="reports.html.dir" location="${reports.dir}/junit-html"/>
<!-- # Coverage reports are deposited into these directories -->
<property name="coverage.xml.dir" location="${reports.dir}/cobertura-xml"/>
<property name="coverage.summaryxml.dir" location="${reports.dir}/cobertura-summary-xml"/>
<property name="coverage.html.dir" location="${reports.dir}/cobertura-html"/>

<!-- # The path to cobertura.jar -->
<property name="cobertura.dir" location="D:\Downloads\cobertura-2.1.1-bin"/>

<path id="cobertura.classpath">
  <fileset dir="${cobertura.dir}">
    <include name="cobertura*.jar" />
    <include name="lib/**/*.jar" />
  </fileset>
</path>


	<target name="init.coverage" depends="init">
		<!-- <mkdir dir="${classes.dir}" /> --> <!-- done in init -->
		<mkdir dir="${instrumented.dir}" />
		<mkdir dir="${reports.xml.dir}" />
		<mkdir dir="${reports.html.dir}" />
		<mkdir dir="${coverage.xml.dir}" />
		<mkdir dir="${coverage.summaryxml.dir}" />
		<mkdir dir="${coverage.html.dir}" />
	</target>

<target name="build.coverage" depends="init.coverage">
	<javac srcdir="${src.dir}" destdir="${classes.dir}" debug="yes">
		<classpath refid="cobertura.classpath" />
    <compilerarg value="-Xlint"/> <!-- enabled in normal build -->
	</javac>
</target>

	<taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>

	<target name="instrument" depends="clean.coverage,init.coverage,build.coverage">

		<!--
			Instrument the application classes, writing the
			instrumented classes into ${build.instrumented.dir}.
		-->
		<cobertura-instrument todir="${instrumented.dir}">
			<!--
				The following line causes instrument to ignore any
				source line containing a reference to slf4j/logback, for the
				purposes of coverage reporting.
			-->
			<ignore regex="org.slf4j.*" />

			<fileset dir="${classes.dir}">
				<!--
					Instrument all the application classes, but
					don't instrument the test classes.
				-->
				<include name="**/*.class" />
				<exclude name="**/*Test.class" />
			</fileset>
		</cobertura-instrument>
	</target>

	<target name="test.coverage" depends="init.coverage,build.coverage,build.test">
		<junit fork="yes" dir="${basedir}" failureProperty="test.failed"  printsummary="yes" haltonfailure="yes" showoutput="true">
			<!--
				Note the classpath order: instrumented classes are before the
				original (uninstrumented) classes.  This is important.
			-->
			<classpath location="${instrumented.dir}" />
			<classpath location="${classes.dir}" />

			<!--
				The instrumented classes reference classes used by the
				Cobertura runtime, so Cobertura and its dependencies
				must be on your classpath.
			-->
			<classpath refid="cobertura.classpath" />

      <classpath location="${test.build.dir}/classes"/>

      <formatter type="xml" />
			<!--<test name="${testcase}" todir="${reports.xml.dir}" if="testcase" />-->
			<batchtest todir="${reports.xml.dir}"><!--unless="testcase"-->
				<fileset dir="${test.src.dir}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>

		<!--<junitreport todir="${reports.xml.dir}">
			<fileset dir="${reports.xml.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${reports.html.dir}" />
		</junitreport>-->
	</target>

	<target name="coverage-report">
		<!--
			Generate an XML file containing the coverage data using
			the "srcdir" attribute.
		-->
		<cobertura-report srcdir="${src.dir}" destdir="${coverage.xml.dir}" format="xml" />
	</target>

	<target name="summary-coverage-report">
		<!--
			Generate an summary XML file containing the coverage data using
			the "srcdir" attribute.
		-->
		<cobertura-report srcdir="${src.dir}" destdir="${coverage.summaryxml.dir}" format="summaryXml" />
	</target>

	<target name="alternate-coverage-report">
		<!--
			Generate a series of HTML files containing the coverage
			data in a user-readable form using nested source filesets.
		-->
		<cobertura-report destdir="${coverage.html.dir}">
			<fileset dir="${src.dir}">
				<include name="**/*.java"/>
			</fileset>
		</cobertura-report>
	</target>

  <!-- "compile,instrument,test,coverage-report,summary-coverage-report,alternate-coverage-report"/>-->
  
<target name="coverage" depends="init.coverage,build.coverage,instrument,test.coverage,coverage-report,summary-coverage-report,alternate-coverage-report"/>
 
 <target name="jenkins" depends="clean,coverage,build.javadoc"/>
  
</project>