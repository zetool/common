package org.zetool.common.algorithm;

import java.util.concurrent.Callable;

/**
 *
 * @param <P> the problem type that is solved by the algorithm
 * @param <S> the solution type that is generated by the algorithm
 * @author Jan-Philipp Kappmeier
 */
public interface AlgorithmI<P, S> extends Runnable, Callable<S> {	

	/**
		* Returns the instance of the problem that is to be solved.
		* @return the instance of the problem that is to be solved.
		*/
	public P getProblem();

	/**
		* Specifies the instance of the problem this algorithm is going to solve.
		* @param problem the instance of the problem that is to be solved.
		* @throws IllegalStateException if the algorithm is running 
		*/
	public  void setProblem(P problem) throws IllegalStateException;

	/**
		* Returns the solution computed by the algorithm.
		* @return the solution to the algorithm.
		* @throws IllegalStateException if the problem has not been solved yet.
		*/
	public S getSolution() throws IllegalStateException;

	/**
		* Returns whether the algorithm is currently begin executed.
		* @return {@code true} if this algorithm is currently running and
		* {@code false} otherwise.
		*/
	public boolean isRunning();

	/**
		* <p>The framework method for executing the algorithm. It is responsible for
		* recording the runtime of the actual algorithm in addition to handling
		* exceptions and recording the solution to the problem instance.</p>
		* <p>Calling the method solves the problem, afterwords it can be accessed
		* using {@link #getSolution() }.</p>
		* @throws IllegalStateException if the instance of the problem has not been
		* specified yet.
		*/
	@Override
	public void run();
	
	/**
	 * A framework method for executing the algorithm and returns the result. 
	 * <p>Calling the method solves the problem and returns the solution. The
	 * solution is stored and can be accessed again using {@link #getSolution() }.</p>
 	 * @return the solution to the algorithm.
	 */
	@Override
	public S call();
}

